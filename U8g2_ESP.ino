#include <Arduino.h>
#include <Wire.h>
#include <RTClib.h>
#include <U8g2lib.h>

#define NUM_DISPLAYS 6 // Number of displays
#define TCAADDR 0x70

U8G2_SSD1306_128X32_UNIVISION_F_HW_I2C u8g2[NUM_DISPLAYS] = {
  {U8G2_R1, U8X8_PIN_NONE},
  {U8G2_R1, U8X8_PIN_NONE},
  {U8G2_R1, U8X8_PIN_NONE},
  {U8G2_R1, U8X8_PIN_NONE},
  {U8G2_R1, U8X8_PIN_NONE},
  {U8G2_R1, U8X8_PIN_NONE}
};






// 'bitmaps', 32x114px
const unsigned char epd_bitmap_bitmaps [] PROGMEM = {
	0xa9, 0x6e, 0x59, 0x3d, 0x43, 0x52, 0x4a, 0x9f, 0x38, 0xab, 0x08, 0x19, 0xce, 0xcc, 0x30, 0x2f, 
	0x96, 0x84, 0x6b, 0x88, 0x76, 0xc6, 0x5d, 0x1f, 0xe3, 0xf2, 0xc7, 0xc3, 0xda, 0xd0, 0x75, 0x6d, 
	0xb6, 0x04, 0x6a, 0x9e, 0xd0, 0x2e, 0x28, 0x62, 0x33, 0x62, 0x21, 0xb5, 0x0a, 0x31, 0xa7, 0x85, 
	0x0f, 0x14, 0x39, 0x06, 0x7d, 0xb6, 0xa3, 0xde, 0x2e, 0x6c, 0x39, 0xdd, 0x20, 0xf9, 0x0c, 0xa1, 
	0x78, 0xcd, 0xb7, 0x7e, 0xf2, 0xa9, 0xe5, 0x7d, 0x55, 0xdf, 0x99, 0x98, 0x9c, 0x6d, 0x7a, 0x06, 
	0x21, 0x82, 0xf0, 0x2d, 0x5a, 0x1e, 0xbd, 0x7c, 0xe6, 0x1f, 0x55, 0xd2, 0x49, 0x05, 0xd9, 0x96, 
	0x30, 0xd3, 0x6a, 0xb1, 0x00, 0xd9, 0xd4, 0xa0, 0xcc, 0xd4, 0x24, 0xeb, 0x09, 0xe8, 0x95, 0xc7, 
	0x66, 0x14, 0xe8, 0x43, 0xb8, 0x8e, 0x25, 0x4f, 0x6e, 0x81, 0xe5, 0xba, 0x8b, 0x80, 0xca, 0x6f, 
	0xe2, 0x03, 0xb5, 0xc1, 0x30, 0xcd, 0xba, 0x11, 0x40, 0x24, 0x65, 0xfa, 0x47, 0x07, 0x16, 0x25, 
	0xe6, 0x48, 0x62, 0x01, 0xc3, 0xbc, 0xd3, 0x69, 0x05, 0xa0, 0x79, 0x24, 0xe0, 0x40, 0xc7, 0x10, 
	0xd9, 0x9d, 0x2a, 0xe6, 0xb5, 0x93, 0xbb, 0x06, 0xf6, 0xcf, 0xcb, 0x44, 0x2b, 0x24, 0xda, 0xc5, 
	0xb4, 0x91, 0x64, 0x4c, 0x6f, 0x1d, 0x02, 0x0f, 0x8e, 0xc0, 0x84, 0xf2, 0xa8, 0x47, 0x49, 0xe8, 
	0x9c, 0x83, 0x1f, 0x56, 0xd2, 0xe9, 0x9a, 0x00, 0xbd, 0xcd, 0x73, 0x2c, 0x5d, 0x68, 0x79, 0x95, 
	0x10, 0xd6, 0xc8, 0xd6, 0x71, 0x8f, 0x15, 0x28, 0xf6, 0xbf, 0x18, 0xea, 0x5f, 0x13, 0x0e, 0x7d, 
	0x11, 0xe4, 0x73, 0x68, 0xfb, 0xc6, 0xb3, 0x3b, 0xa2, 0xd4, 0xcb, 0x3a, 0xd2, 0xde, 0xf3, 0x46, 
	0x6c, 0x44, 0x28, 0x95, 0x51, 0xbc, 0x20, 0x36, 0x42, 0x56, 0xf9, 0x98, 0xcf, 0x9f, 0x9b, 0xe3, 
	0x4a, 0x87, 0xf2, 0xaa, 0x70, 0x1a, 0xe5, 0x7a, 0x7d, 0xc7, 0x81, 0x39, 0xde, 0x85, 0xb9, 0x6e, 
	0x55, 0x43, 0x0c, 0x0b, 0x93, 0x18, 0x2b, 0xce, 0x1b, 0xce, 0xaf, 0x81, 0xf4, 0x26, 0x83, 0x65, 
	0xa1, 0x61, 0xfe, 0x1a, 0x51, 0x91, 0x2e, 0x16, 0xd4, 0x84, 0xf6, 0xe0, 0x87, 0x73, 0x21, 0xc5, 
	0xbe, 0x65, 0x28, 0xf4, 0xf6, 0xc4, 0x77, 0xad, 0x39, 0x81, 0x1a, 0x64, 0x4f, 0xd7, 0x93, 0x83, 
	0x51, 0xef, 0x1a, 0x50, 0x09, 0x1f, 0xad, 0x7b, 0x26, 0x8c, 0x77, 0x5a, 0x2f, 0x97, 0xf6, 0x10, 
	0x42, 0xc0, 0xc0, 0x56, 0x40, 0xde, 0x9c, 0x52, 0xee, 0x4d, 0xbb, 0x2a, 0xb2, 0xe6, 0xb2, 0x1c, 
	0x9e, 0x5f, 0x6c, 0xdb, 0xb6, 0xcb, 0x14, 0xec, 0xbe, 0xa8, 0xcf, 0x46, 0xed, 0xb5, 0x05, 0x23, 
	0xc9, 0x81, 0xf3, 0x8f, 0xbb, 0x41, 0xb5, 0x39, 0x57, 0xbf, 0xdd, 0xd3, 0x46, 0xb3, 0x8f, 0x74, 
	0xda, 0x1a, 0x51, 0x78, 0x39, 0xed, 0xac, 0x0e, 0x77, 0x42, 0xf9, 0x5d, 0x09, 0xb8, 0x50, 0x14, 
	0x74, 0x6d, 0xf8, 0x35, 0x8a, 0x3b, 0xb1, 0x28, 0x2c, 0xb4, 0x50, 0x6c, 0xda, 0xac, 0xb3, 0xc8, 
	0xa8, 0x37, 0x00, 0x3b, 0x24, 0xb8, 0xcc, 0x12, 0x24, 0xd2, 0x6b, 0x58, 0x84, 0xcd, 0x44, 0x7f, 
	0xb7, 0x82, 0xa6, 0xfb, 0x0a, 0x54, 0x2a, 0x58, 0x00, 0x48, 0xf4, 0xce, 0x6b, 0x59, 0xd7, 0xe3, 
	0x0c, 0xa6, 0xb2, 0x38, 0x57, 0x06, 0x9e, 0x74
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 480)
const int epd_bitmap_allArray_LEN = 1;
const unsigned char* epd_bitmap_allArray[1] = {
	epd_bitmap_bitmaps
};
























RTC_DS3231 rtc;

const char* daysOfTheWeek[7] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};

void selectI2CChannel(uint8_t i) {
  if (i > 7) return;

  Wire.beginTransmission(TCAADDR);
  Wire.write(1 << i);
  Wire.endTransmission();
}

void setup() {
  Serial.begin(115200);
  Wire.begin();

  // RTC initialization
  selectI2CChannel(1);
  if (!rtc.begin()) {
    Serial.println("Couldn't find RTC");
    while (1);
  }
  if (rtc.lostPower()) {
    Serial.println("RTC lost power, setting the time!");
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }

  // Initialize OLED displays
  for (int i = 0; i < NUM_DISPLAYS; i++) {
    selectI2CChannel(i + 2); 
    u8g2[i].begin();
  }
}

void loop() {
  selectI2CChannel(1); 
  DateTime now = rtc.now();
  float tempC = rtc.getTemperature(); 

  // Prepare the time string (HHMMSS)
  char timeStr[7];
  sprintf(timeStr, "%02d%02d%02d", now.hour(), now.minute(), now.second());

  // Determine the part of the day
  const char* partOfDay;
  int hour = now.hour();
  if (hour >= 5 && hour < 12) {
    partOfDay = "Monin";
  } else if (hour >= 12 && hour < 17) {
    partOfDay = "Noon";
  } else if (hour >= 17 && hour < 21) {
    partOfDay = "Evnin";
  } else {
    partOfDay = "Night";
  }


  // Display Time (HHMMSS) and additional information
  for (int i = 0; i < NUM_DISPLAYS; i++) {
    selectI2CChannel(i + 2);
    u8g2[i].clearBuffer();

    // Display large time digits
    u8g2[i].setFont(u8g2_font_logisoso32_tf); 
    char digitStr[2] = {timeStr[i], '\0'};
    u8g2[i].drawStr(0, 32, digitStr);

    // Display additional info at the bottom
    u8g2[i].setFont(u8g2_font_7x14_tf); // Small font for additional info
    char additionalStr[15]; // Increased size for longer strings
    if (i == 0) { // Day of the week
      strcpy(additionalStr, daysOfTheWeek[now.dayOfTheWeek()]);
    } else if (i == 1) { // Part of the day
      strcpy(additionalStr, partOfDay);
    } else if (i == 2) { // "Temp ="
      strcpy(additionalStr, "Temp=");
    } else if (i == 3) { // Temperature
      sprintf(additionalStr, "%2.1fc", tempC);
    } else if (i == 4) { // Date
      sprintf(additionalStr, "D:%02d", now.day());
    } else if (i == 5) { // Month
      sprintf(additionalStr, "M:%02d", now.month());
    }
    u8g2[i].drawXBMP(0, 0, 32, 114, epd_bitmap_bitmaps); // Adjust x, y, width, and height as needed ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    u8g2[i].drawStr(0, 126, additionalStr);
    u8g2[i].sendBuffer();
  }

  delay(1000); // Update every second
}
